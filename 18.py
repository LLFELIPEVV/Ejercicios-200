# üß™ Ejercicio 18: Clasificaci√≥n de puntos dentro de una figura en forma de ‚àû (lazo lemniscata)

import numpy as np
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


def generar_datos_lazo_lemniscata(n=100_000, centro=(0, 0), escala=1.0):
    """
    Genera datos con una forma de lazo ‚àû (lemniscata de Bernoulli).
    Los puntos son etiquetados seg√∫n si est√°n dentro o fuera del contorno.

    F√≥rmula polar: r¬≤ = a¬≤ * cos(2Œ∏)
    """
    # Genera puntos aleatorios en el plano [-3, 3] √ó [-3, 3]
    X = (np.random.rand(n, 2) * 2 - 1) * escala * 3

    # Centrar coordenadas respecto al centro de la figura
    x = X[:, 0] - centro[0]
    y = X[:, 1] - centro[1]

    # Convertir coordenadas cartesianas a polares
    r = np.sqrt(x**2 + y**2)  # Radio
    theta = np.mod(np.arctan2(y, x), 2 * np.pi)  # √Ångulo (0 a 2œÄ)

    # Radio del borde de la figura ‚àû para ese √°ngulo
    r_figura = np.sqrt(np.abs(np.cos(2 * theta)))

    # Etiquetar como 1 si est√° dentro del contorno ‚àû, 0 si est√° fuera
    dentro = r < r_figura * escala
    etiquetas = dentro.astype(int)

    return X, etiquetas


# Paso 1Ô∏è‚É£: Generar los datos
X, y = generar_datos_lazo_lemniscata(n=200_000, centro=(0, 0), escala=2.5)

# Paso 2Ô∏è‚É£: Normalizar los datos con MinMaxScaler para que est√©n entre 0 y 1
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Paso 3Ô∏è‚É£: Dividir en conjunto de entrenamiento y prueba (estratificado)
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, stratify=y, random_state=42
)

# Paso 4Ô∏è‚É£: Definir y entrenar una red neuronal multicapa (MLP)
model = MLPClassifier(
    hidden_layer_sizes=(64, 64),  # Dos capas ocultas con 64 neuronas cada una
    activation="relu",  # Funci√≥n de activaci√≥n no lineal
    solver="adam",  # Optimizador adaptativo eficiente
    max_iter=3000,  # Iteraciones m√°ximas para asegurar convergencia
    random_state=42,
)
model.fit(X_train, y_train)

# Paso 5Ô∏è‚É£: Evaluar el modelo
y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)

print(f"\n‚úÖ Accuracy del modelo: {acc:.4f}")
print("\nüìã Reporte de clasificaci√≥n:")
print(
    classification_report(
        y_test, y_pred, target_names=["Fuera del lazo", "Dentro del lazo"]
    )
)

print("\nüìä Matriz de confusi√≥n:")
print(confusion_matrix(y_test, y_pred))

# Paso 6Ô∏è‚É£: Visualizar resultados de clasificaci√≥n
plt.figure(figsize=(8, 8))
colores = ["red" if pred == 0 else "green" for pred in y_pred]
plt.scatter(X_test[:, 0], X_test[:, 1], c=colores, s=10, edgecolors="k", alpha=0.5)
plt.title("Clasificaci√≥n de puntos en la figura ‚àû con Red Neuronal")
plt.xlabel("x1 (horizontal)")
plt.ylabel("x2 (vertical)")
plt.grid(True)
plt.tight_layout()
plt.show()
