# üß™ Ejercicio 33: Detecci√≥n de Anomal√≠as en Iris usando Elliptic Envelope

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.covariance import EllipticEnvelope
from sklearn.decomposition import PCA

# 1Ô∏è‚É£ Cargar el dataset Iris
iris = load_iris()
X = iris.data  # Variables num√©ricas (4)
y = iris.target  # Etiquetas de clase (0, 1, 2)
nombres_clases = iris.target_names  # ['setosa', 'versicolor', 'virginica']

# 2Ô∏è‚É£ Escalado de caracter√≠sticas para igualar la influencia de todas las variables
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 3Ô∏è‚É£ Ajustar el modelo Elliptic Envelope para detecci√≥n de anomal√≠as
# Contamination indica el % esperado de anomal√≠as en los datos
modelo_ee = EllipticEnvelope(contamination=0.05, random_state=42)
modelo_ee.fit(X_scaled)

# 4Ô∏è‚É£ Predecir las observaciones: 1 = normal, -1 = anomal√≠a
y_pred = modelo_ee.predict(X_scaled)

# 5Ô∏è‚É£ Reducir la dimensionalidad a 2D para visualizaci√≥n
pca = PCA(n_components=2, random_state=42)
X_pca = pca.fit_transform(X_scaled)

# 6Ô∏è‚É£ Identificar las coordenadas de las observaciones an√≥malas
indices_anomalias = np.where(y_pred == -1)

# 7Ô∏è‚É£ Visualizaci√≥n de clases reales + anomal√≠as detectadas
plt.figure(figsize=(8, 6))

# Puntos normales coloreados por clase real
sns.scatterplot(
    x=X_pca[:, 0],
    y=X_pca[:, 1],
    hue=[nombres_clases[i] for i in y],  # Traducci√≥n a etiquetas de clase
    palette="Set1",
    alpha=0.75,
    s=60,
    edgecolor="k",
    legend="brief",
)

# Puntos detectados como anomal√≠as (marcados con X negra)
plt.scatter(
    X_pca[indices_anomalias, 0],
    X_pca[indices_anomalias, 1],
    c="black",
    marker="x",
    s=100,
    label="Anomal√≠as detectadas",
)

# 8Ô∏è‚É£ Configurar la gr√°fica
plt.title("Detecci√≥n de Anomal√≠as en Iris con Elliptic Envelope + PCA")
plt.xlabel("Componente Principal 1")
plt.ylabel("Componente Principal 2")
plt.legend(title="Clase / Anomal√≠a")
plt.grid(True)
plt.tight_layout()
plt.show()
