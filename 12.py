# Ejercicio 12: ClasificaciÃ³n de datos no lineales (media luna) usando una red neuronal MLP
import matplotlib.pyplot as plt

from sklearn.datasets import make_moons
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# ðŸ“Œ Paso 1: GeneraciÃ³n de datos sintÃ©ticos con forma de media luna
# - `noise`: aÃ±ade ruido para que el problema no sea perfectamente lineal
# - `random_state`: garantiza reproducibilidad
X, y = make_moons(n_samples=100_000, noise=0.25, random_state=42)

# ðŸ“Œ Paso 2: Escalamiento de caracterÃ­sticas
# - Escalamos los datos entre 0 y 1 para mejorar la eficiencia del entrenamiento
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# ðŸ“Œ Paso 3: DivisiÃ³n en conjuntos de entrenamiento y prueba
# - `stratify=y` asegura que la proporciÃ³n de clases sea la misma en ambos conjuntos
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42, stratify=y
)

# ðŸ“Œ Paso 4: DefiniciÃ³n del modelo de red neuronal (MLPClassifier)
# - 2 capas ocultas con 20 neuronas cada una
# - FunciÃ³n de activaciÃ³n ReLU para no linealidad
# - Optimizador Adam, eficiente para muchos problemas
model = MLPClassifier(
    hidden_layer_sizes=(20, 20),
    activation="relu",
    solver="adam",
    max_iter=2000,
    random_state=42,
)

# ðŸ“Œ Paso 5: Entrenamiento del modelo
model.fit(X_train, y_train)

# ðŸ“Œ Paso 6: EvaluaciÃ³n del modelo
y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)

print(f"\nâœ… Accuracy en test: {acc:.4f}")
print("\nðŸ“‹ Reporte de clasificaciÃ³n:")
print(classification_report(y_test, y_pred, target_names=["Clase 0", "Clase 1"]))
print("\nðŸ“Š Matriz de confusiÃ³n:")
print(confusion_matrix(y_test, y_pred))

# ðŸ“Œ Paso 7: VisualizaciÃ³n de las predicciones sobre el conjunto de prueba
plt.figure(figsize=(7, 7))
colores = ["red" if p == 0 else "green" for p in y_pred]
plt.scatter(X_test[:, 0], X_test[:, 1], c=colores, s=20, edgecolors="k", alpha=0.6)
plt.title("ClasificaciÃ³n de datos en forma de media luna (MLPClassifier)")
plt.xlabel("x1 (caracterÃ­stica 1)")
plt.ylabel("x2 (caracterÃ­stica 2)")
plt.grid(True)
plt.tight_layout()
plt.show()
